Web доступность HTML
______________________________________________
1) Правильное указание языка документа (HTML)
-Правильное указание языка в HTML помогает вспомогательным технологиям выбрать 
верный голосовой профайл или набор символов.
-Это хорошо для SEO, это помогает плагинам-переводчикам 
и браузерам правильно определить язык и словарь
______________________________________________
2) Необходимость описание картинки в артибуте alt
-Если картинка является контентной, используйте alt для краткого описания этого 
самого контента и функционала
-Данное описание необходимо как для незрячих пользователей, так и для обычного
пользователя при сбое изображения картины
Важно, чтобы вы не опускали атрибут alt.
-Опущение этого атрибута означает, что изображение является ключевой частью 
контента, но для него нет текстового эквивалента. Если же значение 
атрибута — пустая строка, это значит, что изображение не является ключевой 
частью контента; тогда невизуальные браузеры имеют право совсем 
его не отображать.
______________________________________________
3)Если нужна кнопка, используй элемент <button>
    Кнопки имеют множество преимуществ / важных функций. 
    Например:
    -Возможность фокусировки;
    -Кликабельность (мышкой или клавиатурой);
    -Экранные читалки идентифицируют их как кнопки!

______________________________________________
4)Важно структурировать разметку при помощи заголовков
-При создании правильной схемы голосового озвучивания использование ---h1 — h6---- 
помогает пользователям лучше понять структуру вашей страницы и взаимосвязь 
между отдельными секциями. 
-Кроме того, это поможет пользователям с вспомогательными технологиями 
передвигаться по вашей странице. Экранные читалки предусматривают различные 
способы передвижения от одной единицы контента к другой.
-Когда вы вставляете заголовки, вам следует избегать пропусков уровней

<!-- --------Не пропускайте уровни: ---------->
<body>
    <h1>Мой сайт</h1>
    <h4>Заголовок</h4>
        <h2>Подзаголовок</h2>
    <h3>Заголовок</h3>
</body>


<!-- --------Не полагайтесь на несуществующие алгоритмы: -------->
<body>
    <h1>Мой сайт</h1>
    <section>
        <h1>Заголовок</h1>
        <section>
            <h1>Подзаголовок</h1>
        </section>
    </section>
    <section>
        <h1>Заголовок</h1>
    </section>
</body>


<!!!!-- -------Делайте так: ----------->
<body>
    <h1>Мой сайт</h1>
    <h2>Заголовок</h2>
        <h3>Подзаголовок</h3>
    <h2>Заголовок</h2>
</body>

-----НЕЛЬЗЯ использовать несколько элементов <h1> -----

______________________________________________
5) Использование ориентиров по сайту
Можно и даже нужно размечать тематические секции при помощи HTML5 тегов 
(<article>, <aside>, <nav>, <section>). 

-Также можно использовать ARIA-атрибут role для более старых браузеров или 
секций, не имеющих для обозначения специфических тегов, например, поиска. 
-Секционные элементы не являются прямой заменой элементу <div>. 
-Используйте их для разметки больших кусков связанного контента, отличающегося 
от остального контента на странице. Не злоупотребляйте секционными элементами. 
-Используйте <div> для CSS/JS, а секции для семантики.

`main, `header` и `footer` также являются ориентирами
    Оборачивая основной контент сайта в элемент <main>, вы позволяете пользователям 
переместиться к нему при помощи горячих клавиш. 
    «Элемент main указывает на секцию с основным контентом в документе или приложении» и не должен использоваться больше одного раза.
Как уже говорилось, правильно разделять контент на ориентиры. 
    <header> и <footer> воспринимаются всеми основными браузерами как ориентиры, 
если они не находятся внутри элементов <section> или <article>. 
    Если вам нужна поддержка более старых браузеров, то вы можете превратить шапку 
и подвал вашего сайта в ориентиры при помощи атрибута role со значениями banner
для шапки и contentinfo для подвала.



______________________________________________
6) `fieldset` отлично подходит для группировки элементов формы и придания им 
большего контекста

Вероятно, вы сталкивались с необходимостью добавить несколько радиокнопок или 
чекбоксов в форму. Добавление элементов формы и соответствующих подписей обычно 
не становится такой уж проблемой. Но какой тег вы выбираете, если вам нужно 
подписать целую группу радиокнопок или чекбоксов?

Как вы разметите «Размеры рубашек»? Тег <p> наверняка сработает, но он никак не 
вяжется по смыслу с группой радиокнопок.

Гораздо лучше будет обернуть все в fieldset и поместить «Размеры рубашек» 
в тег <legend>. Экранные читалки будут знать, что <legend> относится к 
радиокнопкам и прочитает их значения вне зависимости от того, какая из них 
выбрана.

______________________________________________
7) Нельзя оборачивать в тег <a> еще один тег <a>

______________________________________________
8) Нельзя оборачивать в тег <span>  тег <p>



-----------------CSS с учетом доступности---------------

1) Размер шрифта (18-20px)

Текст должен быть достаточно большим для чтения на смартфонах и увеличиваться 
вместе с размером экрана, чтобы его можно было читать на расстоянии на больших 
экранах, таких как телевизоры.

Поскольку характеристики шрифтов могут сильно различаться, не имеет смысла 
определять стандартный минимальный размер, но 18–20 пикселей, вероятно, является 
хорошей отправной точкой для небольших экранов.

______________________________________________
2) Установка высоты строки

Высота строки по умолчанию в браузерах составляет примерно 1.2. Согласно Руководству 
по обеспечению доступности веб-контента , он должен быть как минимум 1.5в 
пределах абзацев в блоках текста.

______________________________________________
3) Выравнивание текста по левому или правому краю

Несмотря на то, что некоторые из нас могут предпочесть выровненный текст по 
левому или правому краю, потому что он выглядит лучше, это считается плохой 
практикой. text-align: justify изменяет интервал между словами для создания строк 
одинаковой длины. 
Эти неровные пространства могут повредить читабельности и сильно отвлекать. 
Разбиение слов при необходимости может быть решением, но 
расстановка переносов в CSS не очень хорошо поддерживается и может работать не 
так, как ожидалось.

______________________________________________
4) Определение ширины абзаца

Согласно нескольким источникам, дизайнеры должны стремиться к 45-85 символам 
в строке, поскольку идеальная ширина абзаца предположительно составляет 
65 символов.

При определении ширины текстовых блоков может пригодиться единица измерения 
ch1 ch , поскольку она эквивалентна ширине нулевого (0) символа. 
Он также изменяется при изменении font-familyили font-size.

p { 
  /* Максимальная ширина 65 символов */ 
  max-width: 65ch; 
}

______________________________________________
5) Осторожно используйте контент в псевдоэлементах

Мы можем использовать псевдоэлементы ::beforeи ::afterдобавлять CSS в самом 
начале или в самом конце элемента. Это дает нам довольно распространенный и 
удобный способ добавления элементов дизайна к нашим компонентам, но также 
позволяет добавлять контент с помощью этого content свойства. 

В смысле разделения интересов мы не должны этого делать.

h2 { 
  content: "НЕ ДЕЛАЙТЕ ЭТОГО"; 
}

______________________________________________
6) Экран — не единственный носитель

Несмотря на то, что мы живем в эпоху цифровых технологий, люди все равно что-то 
печатают. Убедитесь, что ваши страницы доступны и пригодны для использования, 
даже если они распечатаны и сохранены в формате PDF. 
Все, что вам нужно сделать, это добавить @media блок в свой CSS и настроить 
стиль элементов, которые выглядят неправильно, или скрыть те, которые не имеют 
смысла на бумаге, например, навигацию или рекламу.

@media print { 
  .header { 
    position: static; 
  }
  навигация { 
    дисплей: нет; 
  } 
}
Одна из проблем с печатными веб-страницами заключается в том, что ссылки 
совершенно бесполезны, потому что вы не знаете, куда они ведут. 
К счастью, CSS дает нам возможность открывать значения атрибутов и отображать 
их на экране (или в данном случае на бумаге).

@media print { 
  a[href^="http"]:not([href*="mywebsite.com"])::after { 
    content: " (" attr(href) ")"; 
  } 
}
Эти строки будут отображать значение hrefатрибута рядом с каждой ссылкой, 
которая имеет hrefатрибут, начинающийся с http , но не содержащий 
mywebsite.com в своем значении.

______________________________________________
7) Резервный вариант для значений свойств с неполной поддержкой

Иногда мы оказываемся в ситуации, когда хотим использовать определенное значение 
свойства, но не можем, потому что оно не поддерживается некоторыми браузерами. 

Это не должно мешать нам использовать его, пока мы предоставляем запасной вариант.
Часто для этого нам даже не нужны запросы функций или любое другое обнаружение 
функций.

Допустим, вы хотите использовать vmaxустройство, которое IE и более ранние версии
Edge не понимают.
div { 
  ширина: 50vmax; /* Не работает в IE и более ранних версиях Edge */ 
}

Чтобы обеспечить запасной вариант, вы просто устанавливаете widthсвойство на 
что-то менее идеальное, но что-то, что браузер поймет, например width: 50vw. 
В следующей строке вы устанавливаете фактическое значение, которое хотите.

div { 
  ширина: 50vw; 
  ширина: 50vmax; 
}
Браузеры, которые не понимают vmax, интерпретируют width: 50vwи просто пропускают 
файлы width: 50vmax. С другой стороны, браузеры, которые его понимают, сначала 
интерпретируют, width: 50vwа затем width: 50vmax. Поскольку vmax объявление идет 
после vwо бъявления, vmaxверсия — это то, что получат пользователи.

______________________________________________
8) Скрытие контента

.visually-hidden { 
    /* Удалить элемент из обычного потока */ 
    position: absolute; 

    /* Обходной путь для ложно произнесенного, смазанного текста */ 
    white-space: nowrap; 

    /* Установите наименьший возможный размер (некоторые программы чтения с экрана
     игнорируют элементы с нулевой высотой и шириной) */ 
    width: 1px; 
    высота: 1 пиксель; 

    /* Скрыть лишнее содержимое после изменения размера */ 
    overflow: hidden; 

    /* Сбросить любое свойство, которое может изменить размер элементов */ 
    border: 0; 
    заполнение: 0; 

    /* Отсечение определяет, какая часть элемента должна отображаться. */
    
    /* Свойство clip устарело для старых браузеров */ 

    clip: rect(0 0 0 0);

    /* clip-path для новых браузеров. inset(50%) определяет вложенный 
    прямоугольник, из-за которого содержимое исчезает. */ 
    clip-path: inset(50%); 

    /* Похоже, что на данный момент никто не совсем уверен, почему здесь 
      присутствует margin: -1px. Кроме того, кажется, что это вызывает проблемы
       (см. https://github.com/h5bp/html5-boilerplate/issues/1985).
    */ 
    поле: -1px; 
  }
______________________________________________
8) Пропустить ссылки

Класс из предыдущего раздела также подходит для использования в качестве 
ссылки для пропуска. Ссылка для пропуска — это ссылка, которая изначально 
визуально скрыта, но видна в фокусе. 

Это должен быть один из первых элементов на странице, чтобы дать пользователям 
программ чтения с экрана и клавиатуры возможность сразу же пропустить вводный 
контент и сразу перейти к основному контенту. 

По сути, это просто якорная ссылка, которая приведет пользователя к определенной 
части страницы.

______________________________________________
9)Семантическое скрытие контента

Иногда имеет смысл отображать контент визуально, но скрывать его от средств 
чтения с экрана, например, когда вы используете значки. В этом случае добавьте 
aria-hidden атрибут к элементу, который хотите скрыть, и установите для него 
значение true.
<button> 
  <span class="icon icon-hamburger" aria-hidden="true"></span> 
  <span class="text">Меню</span> 
</button>

Другие
Существуют и другие способы скрытия содержимого, например отрицательный, 
text-indent нулевой font-sizeили height. 
Хотя некоторые из них работают, есть определенные оговорки

______________________________________________
10) Контрасность
Коэффициент контрастности показывает, насколько высока контрастность текста 
определенных размеров и ширины на определенном фоне. Соотношение может 
варьироваться от 1:1 до 21:1. Это 1:1, если оба сравниваемых цвета одинаковы, 
и 21:1, если черный и белый являются противоположными цветами.

В соответствии с Руководством по доступности веб-контента (WCAG) 2.0 мы должны 
обеспечить коэффициент контрастности не менее 4,5:1 между фоном и его текстом 
(или изображениями текста). 

Это относится к тексту меньше 24px(если не полужирный) и меньше 19px(если 
полужирный). 

Для более крупного текста достаточно соотношения 3:1. Это минимальные числа для 
соответствия критериям уровня AA. Для прохождения уровня AAA минимальное 
соотношение для обычного текста составляет 7:1 и 4,5:1 для полужирного текста. 
Это не требуется для соответствия, но если мы используем значки, мы должны 
попытаться использовать значки, которые соответствуют положениям о контрасте для 
текста.

Вы можете использовать медиа-запросы, чтобы определить, активен ли режим высокой
 контрастности, и предоставить определенные стили.

/* Режим высокой контрастности активен */ 
@media (-ms-high-contrast:active) { 
}
/* Режим высокой контрастности со специальной темой черного на белом */ 
@media (-ms-high-contrast:black-on-white) { 
}
/* Режим высокой контрастности со специальной темой белого на черном */ 
@media (-ms-high-contrast:white-on-black) { 
}

______________________________________________
11)Забота о порядке

Существует множество способов изменить порядок расположения элементов. 
Например, есть order и flex-direction для Flexbox или order, flex-auto-flow и 
конечно явное размещение для Grid. Хотя эти свойства действительно полезны, они 
могут создать разрыв между порядком DOM и визуальным представлением контента.

Непредсказуемый или неправильный порядок касается не только пользователей 
клавиатуры. Программы чтения с экрана объявляют содержимое в порядке DOM, порядок
в CSS не влияет на программное обеспечение, но влияет на его пользователей. 

Вы можете подумать, что пользователям программ чтения с экрана все равно на 
визуальное представление контента. Это не всегда так, потому что не все 
пользователи программ чтения с экрана слепы . У некоторых плохое зрение или 
проблемы с обучением, и они используют программы чтения с экрана, чтобы дополнить
то, что они видят на экране.

Эти проблемы с упорядочением применимы не только к элементам flex или grid, но
и к любому виду позиционирования. Важно упорядочить контент таким образом, чтобы
он имел смысл без стилей, а затем проверить, соответствует ли он порядку в 
дизайне. Если нет, возможно, вам придется переосмыслить свой дизайн. Что бы вы ни
делали, не переупорядочивайте элементы в разметке вслепую только потому, что вы
не можете правильно расположить их в CSS.

______________________________________________
12) Сосредоточьтесь на том, что важно: сосредоточьтесь

Важно убедиться, что на ваших веб-сайтах можно перемещаться с помощью клавиатуры.
Многие пользователи полагаются на клавиатуру при работе в Интернете. Среди них 
люди с нарушениями опорно-двигательного аппарата, слепые и люди, у которых нет 
рук или которые по каким-либо причинам не могут пользоваться мышью или трекпадом.

Есть несколько вещей, которые вы можете сделать в CSS, чтобы задать стили для 
фокусируемых элементов.

______________________________________________
13) Выбор сфокусированных элементов
Вы можете выбрать фокусируемые элементы в их состоянии фокуса с помощью :focus
псевдокласса и применить к ним стили.
а: фокус { 
  цвет фона: # 000000; 
  цвет: #FFFFFF; 
}
Стили фокуса по умолчанию не очень согласуются между браузерами, часто уродливы,
а в некоторых случаях не очень хорошо сочетаются с вашим дизайном .

Рекомендуется предоставлять настраиваемые стили фокуса, которые улучшают 
взаимодействие с пользователем и соответствуют вашему дизайну.

Что бы вы ни делали, не удаляйте контур по умолчанию (пунктирный контур, синее 
или оранжевое кольцо), не предоставляя альтернативные стили. 

Пользователи, которые полагаются на клавиатуру как на основной способ навигации, 
не смогут использовать ваш сайт, если они не знают, где находится фокус.

Не удаляйте стили фокуса по умолчанию, не предоставив альтернативы 
(Источник: layoutnone.com )
Это не просто совет, а критерий уровня АА .