// 1.Отлавливать ошибки через консоль браузера

// В каждом браузере есть свой механизм отслеживания ошибок JS и они умеют 
// записывать ошибки в отдельное окно, которое называется консолью ошибок. 
// В зависимости, каким браузером пользуетесь, вызов данной консоли может 
// у них отличается.

// Для примера как это все работает, напишем простенькую программу. 
// Где по нажатию на кнопку будем менять цвет фона страницы.

// <script>
//        alert("Ошибки не найдено");
//        var colorArray = ["#9C3A2E", "#FC1D0F", "#5f76fa", "#FAD5BB", "#01c1c1"]; // создаем массив с цветами фона
//        var i = 0;
//        function changeColor() {
//            document.body.style.background = colorArray[i];
//            i ++;
//            if (i > colorArray.length - 1) {
//                i = 0;
//            }
//        }
// </script>
 
// <button onclick="changeColor();">Изменить цвет</button>     

// Теперь нажимаем на копку и на страничке нечего не происходит, так как она 
// содержит ошибку. Консоль браузера поможет отловить основные опечатки, 
// которые непременно будут присутствовать при начальном этапе программирования.

// Консоль в браузере Ghrome вызывается при помощи кнопки F12, 
// а также ctrl+shrift+I или вызвать из настроек,  перейти в настройки меню, 
// инструменты разработчиков.
// В консоли также выводится имя файла с ошибкой и номер строки, что помогает 
// ее обнаружению. Щелкнув мышью по имени файла, мы увидим выделенную строку 
// с ошибкой.


// Консоль в браузере Internet Explorer вызывается при помощи кнопки F12, 
// или из настроек браузера, инструменты разработчика. По аналоги также как и в 
// Ghrome мы видим, что присутствует ошибка, какого рода и на какой строке.

// В браузер Firefof  от компании Mozilla также предусмотрена консоль 
// отслеживания ошибок. Что бы ее отобразить можно воспользоваться 
// сочетанием клавиш ctrl+shrift+I или вызвать это меню из настроек браузера.


// 2. Проверка подключаемых файлов при помощи функции alert
// Функция alert() - благодаря ей можно успешно отследить какие скрипты подключены 
// и в некоторых случаях отловить в них ошибки.

// Для примера создадим файл и подключим его к страничке Index.html. 
// Мы незнаем на сколько правильно он работает, и подключен ли он вообще, 
// для этого разместим в нем простенький скрипт и загрузим страницу.

// Код будет выводить в цикле заданное количество слов.

// <script>
//        var timesHello = 5;
//        alert("Ошибки нет");
//        for (var i = 0; i < timesHello; i++){
//            document.write ("Привет ");
//    }
// </script>    
// Сделает преднамеренную опечатку, и загрузим страницу.  
// Вроде она заработала, но вывод работы скрипта не увидели. Так вот в таких 
// случаях можно воспользоваться функцией alert(); 
// достаточно ее вызвать в файле что бы убедится что он подключен. 
// То есть, если появилось всплывающее окно значит файл успешно.

// При помощи подбора мы прописываем данную функцию после каждой строки 
// тем самым сможем отловить ошибку в самом коде. Но не всегда этот метод 
// будет удобен, если у Вас код большой, в несколько сот, а то и тысяч 
// строк, понадобится много времени что бы перебрать эту громаду, по 
// этому в данном случае она используется в большей мере для определенных
// участков кода где ожидаема ошибка или протестить правильность 
// подключение скрипта.