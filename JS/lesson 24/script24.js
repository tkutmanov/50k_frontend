"use strict";
// использование строгого режима для обработки данных


let number = 1;
// данные которые указываются без скобок = число
let text = "Ismar";
// данные которые заключены в скобки называются строки - "string"
console.log(number);
console.log(text);
console.log(10*5);
console.log(10*"Ismar"); 
//NaN - это означает не правильное использование синтаксиса
// то есть нельзя умножать(*) , делить(-) и отнимать (-) число и текст 
 //результат будет NaN

console.log(text+1);
// текст + цифра = это будет означать ОПЕРАЦИЮ склеивания
// + это операция склеивания и сложения



console.log(number+1); // получим 2

//TRUE=ИСТИНА
//FALSE=ЛОЖЬ

let number2 = true;
console.log(number2);

// console.log(unknown);  // ошибка - is not defined = не определено

//создание объекта начинается с фигурных скобок
let obj = {
    name:"Ismar",
    // name это название первого объекта
    // : это разделение между объектом и его значением
    //"" внутри ковычек указывается значение объекта 
    // конец строки заканчивается на ,
    age:26,
    location:"Kyrgyzstan"
    
};

// Первый вариант получения данных из объекта

// console.log - это команда для вывода данных на экран
    // obj -это переменная
        // . это операция обращения к объекту
            // name это название объекта

console.log("Name:" + obj.name + " Age:"+ obj.age);

// Второй вариант получения данных из объекта

// obj -это переменная
    // [] -это указание позиции и уточнения объекта
        // "" нужны для определния объекта
            // name это название объекта

console.log(obj["name"]);

// Массивы
// Массив создается с помощью квадратных скобок[]
// В массивах используются сразу значения
// для получения значения необходимо использовать порядковый номер

        //   0           1        2
let arr = ["яблоко", "iphone", "pen"];

// console.log[arr.яблоко]; //undefined , не понятно-не определено

console.log(arr[0]); //яблоко


// ==========ОБЪЕКТЫ================

//Объекты – это ассоциативные массивы с рядом дополнительных возможностей.
// Они хранят свойства (пары ключ-значение), где:
// Ключи свойств должны быть строками или символами (обычно строками).
// Значения могут быть любого типа.

// ------Чтобы получить доступ к свойству, мы можем использовать:
// Запись через точку: obj.property.
// Квадратные скобки obj["property"]. 
// Квадратные скобки позволяют взять ключ из переменной, 
//например, obj[varWithKey].

// -----Дополнительные операторы:
// Удаление свойства: delete obj.prop.
// Проверка существования свойства: "key" in obj.
// Перебор свойств объекта: цикл for for (let key in obj).



//===========МАССИВЫ===========

// Массив – это особый тип объекта, предназначенный 
//для работы с упорядоченным набором элементов.

// Объявление:
// квадратные скобки (обычно)
// let arr = [item1, item2...];
// new Array (очень редко)
// let arr = new Array(item1, item2...);

// Вызов new Array(number) создаёт массив 
//с заданной длиной, но без элементов.

// Свойство length отражает длину массива или, 
//если точнее, его последний цифровой индекс плюс один. 
//Длина корректируется автоматически методами массива.
// Если мы уменьшаем length вручную, массив укорачивается.

// Мы можем использовать массив как двустороннюю очередь, 
//используя следующие операции:

// push(...items)добавляет items в конец массива.
// pop() удаляет элемент в конце массива и возвращает его.
// shift() удаляет элемент в начале массива и возвращает его.
// unshift(...items) добавляет items в начало массива.

// Чтобы пройтись по элементам массива:
// for (let i=0; i<arr.length; i++) – работает быстрее всего,
// совместим со старыми браузерами.
// for (let item of arr) – современный синтаксис только для 
//значений элементов (к индексам нет доступа).
// for (let i in arr) – никогда не используйте для массивов!